// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_group_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_group_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_group_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_group_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_group_2eproto;
namespace fixbug {
class ResultCode;
class ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
class addGroupRequest;
class addGroupRequestDefaultTypeInternal;
extern addGroupRequestDefaultTypeInternal _addGroupRequest_default_instance_;
class addGroupResponse;
class addGroupResponseDefaultTypeInternal;
extern addGroupResponseDefaultTypeInternal _addGroupResponse_default_instance_;
class createGroupRequest;
class createGroupRequestDefaultTypeInternal;
extern createGroupRequestDefaultTypeInternal _createGroupRequest_default_instance_;
class createGroupResponse;
class createGroupResponseDefaultTypeInternal;
extern createGroupResponseDefaultTypeInternal _createGroupResponse_default_instance_;
}  // namespace fixbug
PROTOBUF_NAMESPACE_OPEN
template<> ::fixbug::ResultCode* Arena::CreateMaybeMessage<::fixbug::ResultCode>(Arena*);
template<> ::fixbug::addGroupRequest* Arena::CreateMaybeMessage<::fixbug::addGroupRequest>(Arena*);
template<> ::fixbug::addGroupResponse* Arena::CreateMaybeMessage<::fixbug::addGroupResponse>(Arena*);
template<> ::fixbug::createGroupRequest* Arena::CreateMaybeMessage<::fixbug::createGroupRequest>(Arena*);
template<> ::fixbug::createGroupResponse* Arena::CreateMaybeMessage<::fixbug::createGroupResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fixbug {

// ===================================================================

class ResultCode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.ResultCode) */ {
 public:
  ResultCode();
  virtual ~ResultCode();

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultCode* New() const final {
    return CreateMaybeMessage<ResultCode>(nullptr);
  }

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultCode& from);
  void MergeFrom(const ResultCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.ResultCode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.ResultCode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class createGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.createGroupRequest) */ {
 public:
  createGroupRequest();
  virtual ~createGroupRequest();

  createGroupRequest(const createGroupRequest& from);
  createGroupRequest(createGroupRequest&& from) noexcept
    : createGroupRequest() {
    *this = ::std::move(from);
  }

  inline createGroupRequest& operator=(const createGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline createGroupRequest& operator=(createGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const createGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const createGroupRequest* internal_default_instance() {
    return reinterpret_cast<const createGroupRequest*>(
               &_createGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(createGroupRequest& a, createGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(createGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline createGroupRequest* New() const final {
    return CreateMaybeMessage<createGroupRequest>(nullptr);
  }

  createGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<createGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const createGroupRequest& from);
  void MergeFrom(const createGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(createGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.createGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupnameFieldNumber = 2,
    kGroupdescFieldNumber = 4,
    kUseridFieldNumber = 1,
    kGroupidFieldNumber = 3,
  };
  // string groupname = 2;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // string groupdesc = 4;
  void clear_groupdesc();
  const std::string& groupdesc() const;
  void set_groupdesc(const std::string& value);
  void set_groupdesc(std::string&& value);
  void set_groupdesc(const char* value);
  void set_groupdesc(const char* value, size_t size);
  std::string* mutable_groupdesc();
  std::string* release_groupdesc();
  void set_allocated_groupdesc(std::string* groupdesc);
  private:
  const std::string& _internal_groupdesc() const;
  void _internal_set_groupdesc(const std::string& value);
  std::string* _internal_mutable_groupdesc();
  public:

  // uint32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 groupid = 3;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.createGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupdesc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class createGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.createGroupResponse) */ {
 public:
  createGroupResponse();
  virtual ~createGroupResponse();

  createGroupResponse(const createGroupResponse& from);
  createGroupResponse(createGroupResponse&& from) noexcept
    : createGroupResponse() {
    *this = ::std::move(from);
  }

  inline createGroupResponse& operator=(const createGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline createGroupResponse& operator=(createGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const createGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const createGroupResponse* internal_default_instance() {
    return reinterpret_cast<const createGroupResponse*>(
               &_createGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(createGroupResponse& a, createGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(createGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline createGroupResponse* New() const final {
    return CreateMaybeMessage<createGroupResponse>(nullptr);
  }

  createGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<createGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const createGroupResponse& from);
  void MergeFrom(const createGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(createGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.createGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  ::fixbug::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.createGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::fixbug::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class addGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.addGroupRequest) */ {
 public:
  addGroupRequest();
  virtual ~addGroupRequest();

  addGroupRequest(const addGroupRequest& from);
  addGroupRequest(addGroupRequest&& from) noexcept
    : addGroupRequest() {
    *this = ::std::move(from);
  }

  inline addGroupRequest& operator=(const addGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addGroupRequest& operator=(addGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addGroupRequest* internal_default_instance() {
    return reinterpret_cast<const addGroupRequest*>(
               &_addGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(addGroupRequest& a, addGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addGroupRequest* New() const final {
    return CreateMaybeMessage<addGroupRequest>(nullptr);
  }

  addGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addGroupRequest& from);
  void MergeFrom(const addGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.addGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupnameFieldNumber = 2,
    kUseridFieldNumber = 1,
  };
  // string groupname = 2;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // uint32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.addGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class addGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.addGroupResponse) */ {
 public:
  addGroupResponse();
  virtual ~addGroupResponse();

  addGroupResponse(const addGroupResponse& from);
  addGroupResponse(addGroupResponse&& from) noexcept
    : addGroupResponse() {
    *this = ::std::move(from);
  }

  inline addGroupResponse& operator=(const addGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addGroupResponse& operator=(addGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addGroupResponse* internal_default_instance() {
    return reinterpret_cast<const addGroupResponse*>(
               &_addGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(addGroupResponse& a, addGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addGroupResponse* New() const final {
    return CreateMaybeMessage<addGroupResponse>(nullptr);
  }

  addGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addGroupResponse& from);
  void MergeFrom(const addGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.addGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_group_2eproto);
    return ::descriptor_table_group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated string group = 2;
  int group_size() const;
  private:
  int _internal_group_size() const;
  public:
  void clear_group();
  const std::string& group(int index) const;
  std::string* mutable_group(int index);
  void set_group(int index, const std::string& value);
  void set_group(int index, std::string&& value);
  void set_group(int index, const char* value);
  void set_group(int index, const char* value, size_t size);
  std::string* add_group();
  void add_group(const std::string& value);
  void add_group(std::string&& value);
  void add_group(const char* value);
  void add_group(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group();
  private:
  const std::string& _internal_group(int index) const;
  std::string* _internal_add_group();
  public:

  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  ::fixbug::ResultCode* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:fixbug.addGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_;
  ::fixbug::ResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// ===================================================================

class GroupServiceRpc_Stub;

class GroupServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GroupServiceRpc() {};
 public:
  virtual ~GroupServiceRpc();

  typedef GroupServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void createGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::createGroupRequest* request,
                       ::fixbug::createGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void addGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::addGroupRequest* request,
                       ::fixbug::addGroupResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GroupServiceRpc);
};

class GroupServiceRpc_Stub : public GroupServiceRpc {
 public:
  GroupServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GroupServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GroupServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GroupServiceRpc ------------------------------------------

  void createGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::createGroupRequest* request,
                       ::fixbug::createGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void addGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::addGroupRequest* request,
                       ::fixbug::addGroupResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GroupServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResultCode

// int32 errcode = 1;
inline void ResultCode::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:fixbug.ResultCode.errcode)
  return _internal_errcode();
}
inline void ResultCode::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void ResultCode::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:fixbug.ResultCode.errcode)
}

// bytes errmsg = 2;
inline void ResultCode::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:fixbug.ResultCode.errmsg)
  return _internal_errmsg();
}
inline void ResultCode::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:fixbug.ResultCode.errmsg)
}
inline std::string* ResultCode::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:fixbug.ResultCode.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ResultCode::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void ResultCode::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResultCode::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.ResultCode.errmsg)
}
inline std::string* ResultCode::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:fixbug.ResultCode.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:fixbug.ResultCode.errmsg)
}

// -------------------------------------------------------------------

// createGroupRequest

// uint32 userid = 1;
inline void createGroupRequest::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 createGroupRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 createGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.createGroupRequest.userid)
  return _internal_userid();
}
inline void createGroupRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void createGroupRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.createGroupRequest.userid)
}

// string groupname = 2;
inline void createGroupRequest::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& createGroupRequest::groupname() const {
  // @@protoc_insertion_point(field_get:fixbug.createGroupRequest.groupname)
  return _internal_groupname();
}
inline void createGroupRequest::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:fixbug.createGroupRequest.groupname)
}
inline std::string* createGroupRequest::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:fixbug.createGroupRequest.groupname)
  return _internal_mutable_groupname();
}
inline const std::string& createGroupRequest::_internal_groupname() const {
  return groupname_.GetNoArena();
}
inline void createGroupRequest::_internal_set_groupname(const std::string& value) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void createGroupRequest::set_groupname(std::string&& value) {
  
  groupname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.createGroupRequest.groupname)
}
inline void createGroupRequest::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.createGroupRequest.groupname)
}
inline void createGroupRequest::set_groupname(const char* value, size_t size) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.createGroupRequest.groupname)
}
inline std::string* createGroupRequest::_internal_mutable_groupname() {
  
  return groupname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* createGroupRequest::release_groupname() {
  // @@protoc_insertion_point(field_release:fixbug.createGroupRequest.groupname)
  
  return groupname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void createGroupRequest::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:fixbug.createGroupRequest.groupname)
}

// uint32 groupid = 3;
inline void createGroupRequest::clear_groupid() {
  groupid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 createGroupRequest::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 createGroupRequest::groupid() const {
  // @@protoc_insertion_point(field_get:fixbug.createGroupRequest.groupid)
  return _internal_groupid();
}
inline void createGroupRequest::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  groupid_ = value;
}
inline void createGroupRequest::set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:fixbug.createGroupRequest.groupid)
}

// string groupdesc = 4;
inline void createGroupRequest::clear_groupdesc() {
  groupdesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& createGroupRequest::groupdesc() const {
  // @@protoc_insertion_point(field_get:fixbug.createGroupRequest.groupdesc)
  return _internal_groupdesc();
}
inline void createGroupRequest::set_groupdesc(const std::string& value) {
  _internal_set_groupdesc(value);
  // @@protoc_insertion_point(field_set:fixbug.createGroupRequest.groupdesc)
}
inline std::string* createGroupRequest::mutable_groupdesc() {
  // @@protoc_insertion_point(field_mutable:fixbug.createGroupRequest.groupdesc)
  return _internal_mutable_groupdesc();
}
inline const std::string& createGroupRequest::_internal_groupdesc() const {
  return groupdesc_.GetNoArena();
}
inline void createGroupRequest::_internal_set_groupdesc(const std::string& value) {
  
  groupdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void createGroupRequest::set_groupdesc(std::string&& value) {
  
  groupdesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.createGroupRequest.groupdesc)
}
inline void createGroupRequest::set_groupdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.createGroupRequest.groupdesc)
}
inline void createGroupRequest::set_groupdesc(const char* value, size_t size) {
  
  groupdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.createGroupRequest.groupdesc)
}
inline std::string* createGroupRequest::_internal_mutable_groupdesc() {
  
  return groupdesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* createGroupRequest::release_groupdesc() {
  // @@protoc_insertion_point(field_release:fixbug.createGroupRequest.groupdesc)
  
  return groupdesc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void createGroupRequest::set_allocated_groupdesc(std::string* groupdesc) {
  if (groupdesc != nullptr) {
    
  } else {
    
  }
  groupdesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupdesc);
  // @@protoc_insertion_point(field_set_allocated:fixbug.createGroupRequest.groupdesc)
}

// -------------------------------------------------------------------

// createGroupResponse

// .fixbug.ResultCode result = 1;
inline bool createGroupResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool createGroupResponse::has_result() const {
  return _internal_has_result();
}
inline void createGroupResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::fixbug::ResultCode& createGroupResponse::_internal_result() const {
  const ::fixbug::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::ResultCode*>(
      &::fixbug::_ResultCode_default_instance_);
}
inline const ::fixbug::ResultCode& createGroupResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.createGroupResponse.result)
  return _internal_result();
}
inline ::fixbug::ResultCode* createGroupResponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.createGroupResponse.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::fixbug::ResultCode* createGroupResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::fixbug::ResultCode* createGroupResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:fixbug.createGroupResponse.result)
  return _internal_mutable_result();
}
inline void createGroupResponse::set_allocated_result(::fixbug::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.createGroupResponse.result)
}

// bool success = 2;
inline void createGroupResponse::clear_success() {
  success_ = false;
}
inline bool createGroupResponse::_internal_success() const {
  return success_;
}
inline bool createGroupResponse::success() const {
  // @@protoc_insertion_point(field_get:fixbug.createGroupResponse.success)
  return _internal_success();
}
inline void createGroupResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void createGroupResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:fixbug.createGroupResponse.success)
}

// -------------------------------------------------------------------

// addGroupRequest

// uint32 userid = 1;
inline void addGroupRequest::clear_userid() {
  userid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 addGroupRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 addGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.addGroupRequest.userid)
  return _internal_userid();
}
inline void addGroupRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  userid_ = value;
}
inline void addGroupRequest::set_userid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.addGroupRequest.userid)
}

// string groupname = 2;
inline void addGroupRequest::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& addGroupRequest::groupname() const {
  // @@protoc_insertion_point(field_get:fixbug.addGroupRequest.groupname)
  return _internal_groupname();
}
inline void addGroupRequest::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:fixbug.addGroupRequest.groupname)
}
inline std::string* addGroupRequest::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:fixbug.addGroupRequest.groupname)
  return _internal_mutable_groupname();
}
inline const std::string& addGroupRequest::_internal_groupname() const {
  return groupname_.GetNoArena();
}
inline void addGroupRequest::_internal_set_groupname(const std::string& value) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void addGroupRequest::set_groupname(std::string&& value) {
  
  groupname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.addGroupRequest.groupname)
}
inline void addGroupRequest::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.addGroupRequest.groupname)
}
inline void addGroupRequest::set_groupname(const char* value, size_t size) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.addGroupRequest.groupname)
}
inline std::string* addGroupRequest::_internal_mutable_groupname() {
  
  return groupname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* addGroupRequest::release_groupname() {
  // @@protoc_insertion_point(field_release:fixbug.addGroupRequest.groupname)
  
  return groupname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void addGroupRequest::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:fixbug.addGroupRequest.groupname)
}

// -------------------------------------------------------------------

// addGroupResponse

// .fixbug.ResultCode result = 1;
inline bool addGroupResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool addGroupResponse::has_result() const {
  return _internal_has_result();
}
inline void addGroupResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::fixbug::ResultCode& addGroupResponse::_internal_result() const {
  const ::fixbug::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fixbug::ResultCode*>(
      &::fixbug::_ResultCode_default_instance_);
}
inline const ::fixbug::ResultCode& addGroupResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.addGroupResponse.result)
  return _internal_result();
}
inline ::fixbug::ResultCode* addGroupResponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.addGroupResponse.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::fixbug::ResultCode* addGroupResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::fixbug::ResultCode* addGroupResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:fixbug.addGroupResponse.result)
  return _internal_mutable_result();
}
inline void addGroupResponse::set_allocated_result(::fixbug::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.addGroupResponse.result)
}

// repeated string group = 2;
inline int addGroupResponse::_internal_group_size() const {
  return group_.size();
}
inline int addGroupResponse::group_size() const {
  return _internal_group_size();
}
inline void addGroupResponse::clear_group() {
  group_.Clear();
}
inline std::string* addGroupResponse::add_group() {
  // @@protoc_insertion_point(field_add_mutable:fixbug.addGroupResponse.group)
  return _internal_add_group();
}
inline const std::string& addGroupResponse::_internal_group(int index) const {
  return group_.Get(index);
}
inline const std::string& addGroupResponse::group(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.addGroupResponse.group)
  return _internal_group(index);
}
inline std::string* addGroupResponse::mutable_group(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.addGroupResponse.group)
  return group_.Mutable(index);
}
inline void addGroupResponse::set_group(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:fixbug.addGroupResponse.group)
  group_.Mutable(index)->assign(value);
}
inline void addGroupResponse::set_group(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:fixbug.addGroupResponse.group)
  group_.Mutable(index)->assign(std::move(value));
}
inline void addGroupResponse::set_group(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fixbug.addGroupResponse.group)
}
inline void addGroupResponse::set_group(int index, const char* value, size_t size) {
  group_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fixbug.addGroupResponse.group)
}
inline std::string* addGroupResponse::_internal_add_group() {
  return group_.Add();
}
inline void addGroupResponse::add_group(const std::string& value) {
  group_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fixbug.addGroupResponse.group)
}
inline void addGroupResponse::add_group(std::string&& value) {
  group_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fixbug.addGroupResponse.group)
}
inline void addGroupResponse::add_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fixbug.addGroupResponse.group)
}
inline void addGroupResponse::add_group(const char* value, size_t size) {
  group_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fixbug.addGroupResponse.group)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
addGroupResponse::group() const {
  // @@protoc_insertion_point(field_list:fixbug.addGroupResponse.group)
  return group_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
addGroupResponse::mutable_group() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.addGroupResponse.group)
  return &group_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fixbug

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_group_2eproto
